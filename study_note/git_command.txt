git移除已经add的文件：
		git rm --cached “文件路径”，不删除物理文件，仅将该文件从缓存中删除；
		git rm --f “文件路径”，不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）
		
		git reset --mixed HEAD~1
git 撤销：
	git reset --soft|--mixed|--hard <commit_id>（未push的）
			这里的<commit_id>就是每次commit的SHA-1，可以在log里查看到
			--mixed 会保留源码,只是将git commit和index 信息回退到了某个版本.
			--soft 保留源码,只回退到commit信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.
			--hard 源码也会回退到某个版本,commit和index 都会回退到某个版本.(注意,这种方式是改变本地代码仓库源码)
	已经push的：
			git revert <commit_id>  --> git push
			
	reset 和 revert 区别：
			第一:上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会.
			第二:如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里.
			第三:reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的.


整合commit:
		git rebase -i commit_c_id (commit_c_id为要整合的前一条commit id)------>
		修改要处理的commit
			# p, pick = 使用提交
			# r, reword = 使用提交，但修改提交说明
			# e, edit = 使用提交，但停止以便进行提交修补
			# s, squash = 使用提交，但和前一个版本融合
			# f, fixup = 类似于 "squash"，但丢弃提交说明日志
			# x, exec = 使用 shell 运行命令（此行剩余部分）
			# d, drop = 删除提交
		重新push  git push origin t_dev --force
		
		